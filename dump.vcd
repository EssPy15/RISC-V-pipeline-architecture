$date
	Thu May 29 19:40:00 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$scope module dut $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 # WriteDataM [31:0] $end
$var wire 32 $ ResultW [31:0] $end
$var wire 1 % ResultSrcW $end
$var wire 1 & ResultSrcM $end
$var wire 1 ' ResultSrcE $end
$var wire 1 ( RegWriteW $end
$var wire 1 ) RegWriteM $end
$var wire 1 * RegWriteE $end
$var wire 32 + ReadDataW [31:0] $end
$var wire 5 , RS2_E [4:0] $end
$var wire 5 - RS1_E [4:0] $end
$var wire 5 . RD_M [4:0] $end
$var wire 5 / RD_E [4:0] $end
$var wire 5 0 RDW [4:0] $end
$var wire 32 1 RD2_E [31:0] $end
$var wire 32 2 RD1_E [31:0] $end
$var wire 32 3 PCTargetE [31:0] $end
$var wire 1 4 PCSrcE $end
$var wire 32 5 PCPlus4W [31:0] $end
$var wire 32 6 PCPlus4M [31:0] $end
$var wire 32 7 PCPlus4E [31:0] $end
$var wire 32 8 PCPlus4D [31:0] $end
$var wire 32 9 PCE [31:0] $end
$var wire 32 : PCD [31:0] $end
$var wire 1 ; MemWriteM $end
$var wire 1 < MemWriteE $end
$var wire 32 = InstrD [31:0] $end
$var wire 32 > Imm_Ext_E [31:0] $end
$var wire 2 ? ForwardBE [1:0] $end
$var wire 2 @ ForwardAE [1:0] $end
$var wire 1 A BranchE $end
$var wire 32 B ALU_ResultW [31:0] $end
$var wire 32 C ALU_ResultM [31:0] $end
$var wire 1 D ALUSrcE $end
$var wire 3 E ALUControlE [2:0] $end
$scope module Execute $end
$var wire 1 ; MemWriteM $end
$var wire 32 F PCPlus4M [31:0] $end
$var wire 1 4 PCSrcE $end
$var wire 5 G RD_M [4:0] $end
$var wire 1 ) RegWriteM $end
$var wire 1 & ResultSrcM $end
$var wire 32 H WriteDataM [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 I ZeroE $end
$var wire 32 J Src_B_1 [31:0] $end
$var wire 32 K Src_B [31:0] $end
$var wire 32 L Src_A [31:0] $end
$var wire 32 M ResultW [31:0] $end
$var wire 1 ' ResultSrcE $end
$var wire 32 N ResultE [31:0] $end
$var wire 1 * RegWriteE $end
$var wire 5 O RD_E [4:0] $end
$var wire 32 P RD2_E [31:0] $end
$var wire 32 Q RD1_E [31:0] $end
$var wire 32 R PCTargetE [31:0] $end
$var wire 32 S PCPlus4E [31:0] $end
$var wire 32 T PCE [31:0] $end
$var wire 1 < MemWriteE $end
$var wire 32 U Imm_Ext_E [31:0] $end
$var wire 2 V ForwardB_E [1:0] $end
$var wire 2 W ForwardA_E [1:0] $end
$var wire 1 A BranchE $end
$var wire 32 X ALU_ResultM [31:0] $end
$var wire 1 D ALUSrcE $end
$var wire 3 Y ALUControlE [2:0] $end
$var reg 1 Z MemWriteE_r $end
$var reg 32 [ PCPlus4E_r [31:0] $end
$var reg 32 \ RD2_E_r [31:0] $end
$var reg 5 ] RD_E_r [4:0] $end
$var reg 1 ) RegWriteE_r $end
$var reg 32 ^ ResultE_r [31:0] $end
$var reg 1 _ ResultSrcE_r $end
$scope module alu $end
$var wire 1 ` Carry $end
$var wire 1 a OverFlow $end
$var wire 1 I Zero $end
$var wire 32 b Sum [31:0] $end
$var wire 32 c Res [31:0] $end
$var wire 1 d Negative $end
$var wire 1 e Cout $end
$var wire 32 f B [31:0] $end
$var wire 3 g ALUControl [2:0] $end
$var wire 32 h A [31:0] $end
$upscope $end
$scope module alu_src_mux $end
$var wire 1 D s $end
$var wire 32 i out [31:0] $end
$var wire 32 j b [31:0] $end
$var wire 32 k a [31:0] $end
$upscope $end
$scope module branch_adder $end
$var wire 32 l c [31:0] $end
$var wire 32 m b [31:0] $end
$var wire 32 n a [31:0] $end
$upscope $end
$scope module srca_mux $end
$var wire 32 o c [31:0] $end
$var wire 2 p s [1:0] $end
$var wire 32 q out [31:0] $end
$var wire 32 r b [31:0] $end
$var wire 32 s a [31:0] $end
$upscope $end
$scope module srcb_mux $end
$var wire 32 t c [31:0] $end
$var wire 2 u s [1:0] $end
$var wire 32 v out [31:0] $end
$var wire 32 w b [31:0] $end
$var wire 32 x a [31:0] $end
$upscope $end
$upscope $end
$scope module Fetch $end
$var wire 1 4 PCSrcE $end
$var wire 32 y PCTargetE [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 z PC_F [31:0] $end
$var wire 32 { PCPlus4F [31:0] $end
$var wire 32 | PCPlus4D [31:0] $end
$var wire 32 } PCF [31:0] $end
$var wire 32 ~ PCD [31:0] $end
$var wire 32 !" InstrF [31:0] $end
$var wire 32 "" InstrD [31:0] $end
$var reg 32 #" InstrF_reg [31:0] $end
$var reg 32 $" PCF_reg [31:0] $end
$var reg 32 %" PCPlus4F_reg [31:0] $end
$scope module IMEM $end
$var wire 1 " rst $end
$var wire 32 &" RD [31:0] $end
$var wire 32 '" A [31:0] $end
$upscope $end
$scope module PC_Mux $end
$var wire 32 (" b [31:0] $end
$var wire 1 4 s $end
$var wire 32 )" out [31:0] $end
$var wire 32 *" a [31:0] $end
$upscope $end
$scope module PC_add $end
$var wire 32 +" b [31:0] $end
$var wire 32 ," c [31:0] $end
$var wire 32 -" a [31:0] $end
$upscope $end
$scope module Program_Counter $end
$var wire 32 ." PC_next [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var reg 32 /" PC [31:0] $end
$upscope $end
$upscope $end
$scope module Forwarding $end
$var wire 5 0" RD_M [4:0] $end
$var wire 1 ) RegWriteM $end
$var wire 1 " rst $end
$var wire 5 1" Rs2_E [4:0] $end
$var wire 5 2" Rs1_E [4:0] $end
$var wire 1 ( RegWriteW $end
$var wire 5 3" RD_W [4:0] $end
$var wire 2 4" ForwardBE [1:0] $end
$var wire 2 5" ForwardAE [1:0] $end
$upscope $end
$scope module Memory $end
$var wire 32 6" ALU_ResultM [31:0] $end
$var wire 32 7" ALU_ResultW [31:0] $end
$var wire 1 ; MemWriteM $end
$var wire 32 8" PCPlus4M [31:0] $end
$var wire 32 9" PCPlus4W [31:0] $end
$var wire 5 :" RD_M [4:0] $end
$var wire 5 ;" RD_W [4:0] $end
$var wire 32 <" ReadDataW [31:0] $end
$var wire 1 ) RegWriteM $end
$var wire 1 ( RegWriteW $end
$var wire 1 & ResultSrcM $end
$var wire 1 % ResultSrcW $end
$var wire 32 =" WriteDataM [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 >" ReadDataM [31:0] $end
$var reg 32 ?" ALU_ResultM_r [31:0] $end
$var reg 32 @" PCPlus4M_r [31:0] $end
$var reg 5 A" RD_M_r [4:0] $end
$var reg 32 B" ReadDataM_r [31:0] $end
$var reg 1 ( RegWriteM_r $end
$var reg 1 % ResultSrcM_r $end
$scope module dmem $end
$var wire 32 C" A [31:0] $end
$var wire 32 D" WD [31:0] $end
$var wire 1 ; WE $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 E" RD [31:0] $end
$upscope $end
$upscope $end
$scope module WriteBack $end
$var wire 32 F" ALU_ResultW [31:0] $end
$var wire 32 G" PCPlus4W [31:0] $end
$var wire 32 H" ReadDataW [31:0] $end
$var wire 1 % ResultSrcW $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 I" ResultW [31:0] $end
$scope module result_mux $end
$var wire 32 J" a [31:0] $end
$var wire 32 K" b [31:0] $end
$var wire 1 % s $end
$var wire 32 L" out [31:0] $end
$upscope $end
$upscope $end
$scope module decode $end
$var wire 3 M" ALUControlE [2:0] $end
$var wire 1 D ALUSrcE $end
$var wire 1 A BranchE $end
$var wire 32 N" Imm_Ext_E [31:0] $end
$var wire 32 O" InstrD [31:0] $end
$var wire 1 < MemWriteE $end
$var wire 32 P" PCD [31:0] $end
$var wire 32 Q" PCE [31:0] $end
$var wire 32 R" PCPlus4D [31:0] $end
$var wire 32 S" PCPlus4E [31:0] $end
$var wire 32 T" RD1_E [31:0] $end
$var wire 32 U" RD2_E [31:0] $end
$var wire 5 V" RDW [4:0] $end
$var wire 5 W" RD_E [4:0] $end
$var wire 5 X" RS1_E [4:0] $end
$var wire 5 Y" RS2_E [4:0] $end
$var wire 1 * RegWriteE $end
$var wire 1 ( RegWriteW $end
$var wire 1 ' ResultSrcE $end
$var wire 32 Z" ResultW [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 [" ResultSrcD $end
$var wire 1 \" RegWriteD $end
$var wire 32 ]" RD2_D [31:0] $end
$var wire 32 ^" RD1_D [31:0] $end
$var wire 1 _" MemWriteD $end
$var wire 32 `" Imm_Ext_D [31:0] $end
$var wire 2 a" ImmSrcD [1:0] $end
$var wire 1 b" BranchD $end
$var wire 1 c" ALUSrcD $end
$var wire 3 d" ALUControlD [2:0] $end
$var reg 3 e" ALUControlD_r [2:0] $end
$var reg 1 D ALUSrcD_r $end
$var reg 1 A BranchD_r $end
$var reg 32 f" Imm_Ext_D_r [31:0] $end
$var reg 1 g" MemWriteD_r $end
$var reg 32 h" PCD_r [31:0] $end
$var reg 32 i" PCPlus4D_r [31:0] $end
$var reg 32 j" RD1_D_r [31:0] $end
$var reg 32 k" RD2_D_r [31:0] $end
$var reg 5 l" RD_D_r [4:0] $end
$var reg 5 m" RS1_D_r [4:0] $end
$var reg 5 n" RS2_D_r [4:0] $end
$var reg 1 o" RegWriteD_r $end
$var reg 1 p" ResultSrcD_r $end
$scope module control $end
$var wire 7 q" Op [6:0] $end
$var wire 3 r" funct3 [2:0] $end
$var wire 7 s" funct7 [6:0] $end
$var wire 1 [" ResultSrc $end
$var wire 1 \" RegWrite $end
$var wire 1 _" MemWrite $end
$var wire 2 t" ImmSrc [1:0] $end
$var wire 1 b" Branch $end
$var wire 1 c" ALUSrc $end
$var wire 2 u" ALUOp [1:0] $end
$var wire 3 v" ALUControl [2:0] $end
$scope module ALU_Decoder $end
$var wire 3 w" funct3 [2:0] $end
$var wire 7 x" funct7 [6:0] $end
$var wire 7 y" op [6:0] $end
$var wire 2 z" ALUOp [1:0] $end
$var wire 3 {" ALUControl [2:0] $end
$upscope $end
$scope module Main_Decoder $end
$var wire 7 |" Op [6:0] $end
$var wire 1 [" ResultSrc $end
$var wire 1 \" RegWrite $end
$var wire 1 _" MemWrite $end
$var wire 2 }" ImmSrc [1:0] $end
$var wire 1 b" Branch $end
$var wire 1 c" ALUSrc $end
$var wire 2 ~" ALUOp [1:0] $end
$upscope $end
$upscope $end
$scope module extend $end
$var wire 2 !# ImmSrc [1:0] $end
$var wire 32 "# In [31:0] $end
$var wire 32 ## Imm_Ext [31:0] $end
$upscope $end
$scope module rf $end
$var wire 5 $# A1 [4:0] $end
$var wire 5 %# A2 [4:0] $end
$var wire 5 &# A3 [4:0] $end
$var wire 32 '# WD3 [31:0] $end
$var wire 1 ( WE3 $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 (# RD2 [31:0] $end
$var wire 32 )# RD1 [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 )#
b0 (#
b0 '#
b0 &#
b0 %#
b0 $#
b0 ##
b0 "#
b0 !#
b0 ~"
b0 }"
b0 |"
b0 {"
b0 z"
b0 y"
b0 x"
b0 w"
b0 v"
b0 u"
b0 t"
b0 s"
b0 r"
b0 q"
0p"
0o"
b0 n"
b0 m"
b0 l"
b0 k"
b0 j"
b0 i"
b0 h"
0g"
b0 f"
b0 e"
b0 d"
0c"
0b"
b0 a"
b0 `"
0_"
b0 ^"
b0 ]"
0\"
0["
b0 Z"
b0 Y"
b0 X"
b0 W"
b0 V"
b0 U"
b0 T"
b0 S"
b0 R"
b0 Q"
b0 P"
b0 O"
b0 N"
b0 M"
b0 L"
b0 K"
b0 J"
b0 I"
b0 H"
b0 G"
b0 F"
b0 E"
b0 D"
b0 C"
b0 B"
b0 A"
b0 @"
b0 ?"
b0 >"
b0 ="
b0 <"
b0 ;"
b0 :"
b0 9"
b0 8"
b0 7"
b0 6"
b0 5"
b0 4"
b0 3"
b0 2"
b0 1"
b0 0"
b0 /"
b100 ."
b0 -"
b100 ,"
b100 +"
b100 *"
b100 )"
b0 ("
b0 '"
b0 &"
b0 %"
b0 $"
b0 #"
b0 ""
b0 !"
b0 ~
b0 }
b0 |
b100 {
b100 z
b0 y
b0 x
b0 w
b0 v
b0 u
b0 t
b0 s
b0 r
b0 q
b0 p
b0 o
b0 n
b0 m
b0 l
b0 k
b0 j
b0 i
b0 h
b0 g
b0 f
0e
0d
b0 c
b0 b
0a
0`
0_
b0 ^
b0 ]
b0 \
b0 [
0Z
b0 Y
b0 X
b0 W
b0 V
b0 U
b0 T
b0 S
b0 R
b0 Q
b0 P
b0 O
b0 N
b0 M
b0 L
b0 K
b0 J
1I
b0 H
b0 G
b0 F
b0 E
0D
b0 C
b0 B
0A
b0 @
b0 ?
b0 >
b0 =
0<
0;
b0 :
b0 9
b0 8
b0 7
b0 6
b0 5
04
b0 3
b0 2
b0 1
b0 0
b0 /
b0 .
b0 -
b0 ,
b0 +
0*
0)
0(
0'
0&
0%
b0 $
b0 #
0"
1!
$end
#50
0!
#100
1!
#150
0!
#200
b10100000000001010010011 !"
b10100000000001010010011 &"
1"
1!
#250
0!
#300
1\"
1c"
bx ]"
bx (#
b101 `"
b101 ##
b10011 q"
b10011 y"
b10011 |"
b101 %#
b1100000000001100010011 !"
b1100000000001100010011 &"
b100 8
b100 |
b100 R"
b10100000000001010010011 =
b10100000000001010010011 ""
b10100000000001010010011 O"
b10100000000001010010011 "#
b1000 z
b1000 )"
b1000 ."
b100 %"
b10100000000001010010011 #"
b1000 {
b1000 *"
b1000 ,"
b100 }
b100 '"
b100 -"
b100 /"
1!
#350
0!
#400
0I
b101 N
b101 c
b11 `"
b11 ##
b101 b
b11 %#
b11000101000001110110011 !"
b11000101000001110110011 &"
bx J
bx k
bx v
b101 K
b101 f
b101 i
b1000 8
b1000 |
b1000 R"
b100 :
b100 ~
b100 P"
b1100000000001100010011 =
b1100000000001100010011 ""
b1100000000001100010011 O"
b1100000000001100010011 "#
b1100 z
b1100 )"
b1100 ."
b101 ,
b101 1"
b101 Y"
b101 n"
b100 7
b100 S
b100 S"
b100 i"
b101 /
b101 O
b101 W"
b101 l"
b101 3
b101 R
b101 l
b101 y
b101 ("
b101 >
b101 U
b101 j
b101 m
b101 N"
b101 f"
bx 1
bx P
bx x
bx U"
bx k"
1D
1*
1o"
b1000 %"
b100 $"
b1100000000001100010011 #"
b1100 {
b1100 *"
b1100 ,"
b1000 }
b1000 '"
b1000 -"
b1000 /"
1!
#450
0!
#500
1\"
0c"
b11 N
b11 c
b10 u"
b10 z"
b10 ~"
bx ^"
bx )#
b110 `"
b110 ##
b110011 q"
b110011 y"
b110011 |"
b101 $#
b110 %#
b11 b
b10010000000011 !"
b10010000000011 &"
b1100 8
b1100 |
b1100 R"
b1000 :
b1000 ~
b1000 P"
b11000101000001110110011 =
b11000101000001110110011 ""
b11000101000001110110011 O"
b11000101000001110110011 "#
b11 K
b11 f
b11 i
bx >"
bx E"
b10000 z
b10000 )"
b10000 ."
b1100 %"
b1000 $"
b11000101000001110110011 #"
b11 ,
b11 1"
b11 Y"
b11 n"
b1000 7
b1000 S
b1000 S"
b1000 i"
b100 9
b100 T
b100 n
b100 Q"
b100 h"
b110 /
b110 O
b110 W"
b110 l"
b111 3
b111 R
b111 l
b111 y
b111 ("
b11 >
b11 U
b11 j
b11 m
b11 N"
b11 f"
b101 C
b101 X
b101 ^
b101 o
b101 t
b101 6"
b101 C"
bx #
bx H
bx ="
bx D"
bx \
b100 6
b100 F
b100 8"
b100 [
b101 .
b101 G
b101 ]
b101 0"
b101 :"
1)
b10000 {
b10000 *"
b10000 ,"
b1100 }
b1100 '"
b1100 -"
b1100 /"
1!
#550
0!
#600
b1 @
b1 W
b1 p
b1 5"
0a
0d
0I
1c"
b11 J
b11 k
b11 v
b1000 N
b1000 c
b10 ?
b10 V
b10 u
b10 4"
1["
b0 u"
b0 z"
b0 ~"
b0 ^"
b0 )#
b0 ]"
b0 (#
b0 `"
b0 ##
b1000 b
b11 q"
b11 y"
b11 |"
b10 r"
b10 w"
b0 $#
b0 %#
b100000000010010010011 !"
b100000000010010010011 &"
b101 $
b101 M
b101 r
b101 w
b101 I"
b101 L"
b101 Z"
b101 '#
b101 L
b101 h
b101 q
b11 K
b11 f
b11 i
b10000 8
b10000 |
b10000 R"
b1100 :
b1100 ~
b1100 P"
b10010000000011 =
b10010000000011 ""
b10010000000011 O"
b10010000000011 "#
b10100 z
b10100 )"
b10100 ."
bx +
bx <"
bx B"
bx H"
bx K"
b101 B
b101 7"
b101 ?"
b101 F"
b101 J"
b100 5
b100 9"
b100 G"
b100 @"
b101 0
b101 3"
b101 ;"
b101 A"
b101 V"
b101 &#
1(
b11 C
b11 X
b11 ^
b11 o
b11 t
b11 6"
b11 C"
b1000 6
b1000 F
b1000 8"
b1000 [
b110 .
b110 G
b110 ]
b110 0"
b110 :"
b110 ,
b110 1"
b110 Y"
b110 n"
b101 -
b101 2"
b101 X"
b101 m"
b1100 7
b1100 S
b1100 S"
b1100 i"
b1000 9
b1000 T
b1000 n
b1000 Q"
b1000 h"
b111 /
b111 O
b111 W"
b111 l"
b1110 3
b1110 R
b1110 l
b1110 y
b1110 ("
b110 >
b110 U
b110 j
b110 m
b110 N"
b110 f"
bx 2
bx Q
bx s
bx T"
bx j"
0D
b10000 %"
b1100 $"
b10010000000011 #"
b10100 {
b10100 *"
b10100 ,"
b10000 }
b10000 '"
b10000 -"
b10000 /"
1!
#650
0!
#700
1I
b0 N
b0 c
b0 @
b0 W
b0 p
b0 5"
0["
bx ]"
bx (#
b1 `"
b1 ##
b0 J
b0 k
b0 v
b0 ?
b0 V
b0 u
b0 4"
b0 L
b0 h
b0 q
b10011 q"
b10011 y"
b10011 |"
b0 r"
b0 w"
b1 %#
b0 b
b100101000000010100110011 !"
b100101000000010100110011 &"
b10100 8
b10100 |
b10100 R"
b10000 :
b10000 ~
b10000 P"
b100000000010010010011 =
b100000000010010010011 ""
b100000000010010010011 O"
b100000000010010010011 "#
b0 K
b0 f
b0 i
b11 $
b11 M
b11 r
b11 w
b11 I"
b11 L"
b11 Z"
b11 '#
b11000 z
b11000 )"
b11000 ."
b10100 %"
b10000 $"
b100000000010010010011 #"
b0 ,
b0 1"
b0 Y"
b0 n"
b0 -
b0 2"
b0 X"
b0 m"
b10000 7
b10000 S
b10000 S"
b10000 i"
b1100 9
b1100 T
b1100 n
b1100 Q"
b1100 h"
b1000 /
b1000 O
b1000 W"
b1000 l"
b1100 3
b1100 R
b1100 l
b1100 y
b1100 ("
b0 >
b0 U
b0 j
b0 m
b0 N"
b0 f"
b0 1
b0 P
b0 x
b0 U"
b0 k"
b0 2
b0 Q
b0 s
b0 T"
b0 j"
1'
1p"
1D
b1000 C
b1000 X
b1000 ^
b1000 o
b1000 t
b1000 6"
b1000 C"
b11 #
b11 H
b11 ="
b11 D"
b11 \
b1100 6
b1100 F
b1100 8"
b1100 [
b111 .
b111 G
b111 ]
b111 0"
b111 :"
b11 B
b11 7"
b11 ?"
b11 F"
b11 J"
b1000 5
b1000 9"
b1000 G"
b1000 @"
b110 0
b110 3"
b110 ;"
b110 A"
b110 V"
b110 &#
b11000 {
b11000 *"
b11000 ,"
b10100 }
b10100 '"
b10100 -"
b10100 /"
1!
#750
0!
#800
0I
b1 N
b1 c
1\"
0c"
b10 u"
b10 z"
b10 ~"
bx ^"
bx )#
b1001 `"
b1001 ##
b1 b
b110011 q"
b110011 y"
b110011 |"
b1000 $#
b1001 %#
bx !"
bx &"
b1000 $
b1000 M
b1000 r
b1000 w
b1000 I"
b1000 L"
b1000 Z"
b1000 '#
b0 >"
b0 E"
b1 K
b1 f
b1 i
bx J
bx k
bx v
b11000 8
b11000 |
b11000 R"
b10100 :
b10100 ~
b10100 P"
b100101000000010100110011 =
b100101000000010100110011 ""
b100101000000010100110011 O"
b100101000000010100110011 "#
b11100 z
b11100 )"
b11100 ."
b1000 B
b1000 7"
b1000 ?"
b1000 F"
b1000 J"
b1100 5
b1100 9"
b1100 G"
b1100 @"
b111 0
b111 3"
b111 ;"
b111 A"
b111 V"
b111 &#
b0 C
b0 X
b0 ^
b0 o
b0 t
b0 6"
b0 C"
b0 #
b0 H
b0 ="
b0 D"
b0 \
b10000 6
b10000 F
b10000 8"
b10000 [
b1000 .
b1000 G
b1000 ]
b1000 0"
b1000 :"
1&
1_
b1 ,
b1 1"
b1 Y"
b1 n"
b10100 7
b10100 S
b10100 S"
b10100 i"
b10000 9
b10000 T
b10000 n
b10000 Q"
b10000 h"
b1001 /
b1001 O
b1001 W"
b1001 l"
b10001 3
b10001 R
b10001 l
b10001 y
b10001 ("
b1 >
b1 U
b1 j
b1 m
b1 N"
b1 f"
bx 1
bx P
bx x
bx U"
bx k"
0'
0p"
b11000 %"
b10100 $"
b100101000000010100110011 #"
b11100 {
b11100 *"
b11100 ,"
b11000 }
b11000 '"
b11000 -"
b11000 /"
1!
#850
0!
#900
x\"
bx d"
bx v"
bx {"
0a
0d
0I
xc"
b1 J
b1 k
b1 v
b1 @
b1 W
b1 p
b1 5"
b1 N
b1 c
bx a"
bx t"
bx }"
bx !#
x_"
x["
xb"
bx u"
bx z"
bx ~"
bx `"
bx ##
b10 ?
b10 V
b10 u
b10 4"
bx q"
bx y"
bx |"
bx r"
bx w"
bx s"
bx x"
bx $#
bx %#
b1 b
b11100 8
b11100 |
b11100 R"
b11000 :
b11000 ~
b11000 P"
bx =
bx ""
bx O"
bx "#
b0 L
b0 h
b0 q
b1 K
b1 f
b1 i
bx >"
bx E"
b0 $
b0 M
b0 r
b0 w
b0 I"
b0 L"
b0 Z"
b0 '#
b100000 z
b100000 )"
b100000 ."
b11100 %"
b11000 $"
bx #"
b1001 ,
b1001 1"
b1001 Y"
b1001 n"
b1000 -
b1000 2"
b1000 X"
b1000 m"
b11000 7
b11000 S
b11000 S"
b11000 i"
b10100 9
b10100 T
b10100 n
b10100 Q"
b10100 h"
b1010 /
b1010 O
b1010 W"
b1010 l"
b11101 3
b11101 R
b11101 l
b11101 y
b11101 ("
b1001 >
b1001 U
b1001 j
b1001 m
b1001 N"
b1001 f"
bx 2
bx Q
bx s
bx T"
bx j"
0D
b1 C
b1 X
b1 ^
b1 o
b1 t
b1 6"
b1 C"
bx #
bx H
bx ="
bx D"
bx \
b10100 6
b10100 F
b10100 8"
b10100 [
b1001 .
b1001 G
b1001 ]
b1001 0"
b1001 :"
0&
0_
b0 +
b0 <"
b0 B"
b0 H"
b0 K"
b0 B
b0 7"
b0 ?"
b0 F"
b0 J"
b10000 5
b10000 9"
b10000 G"
b10000 @"
b1000 0
b1000 3"
b1000 ;"
b1000 A"
b1000 V"
b1000 &#
1%
b100000 {
b100000 *"
b100000 ,"
b11100 }
b11100 '"
b11100 -"
b11100 /"
1!
#950
0!
#1000
xa
bx J
bx k
bx v
xd
x4
bx L
bx h
bx q
bx ?
bx V
bx u
bx 4"
bx @
bx W
bx p
bx 5"
xI
bx N
bx c
bx b
b1 $
b1 M
b1 r
b1 w
b1 I"
b1 L"
b1 Z"
b1 '#
bx K
bx f
bx i
b100000 8
b100000 |
b100000 R"
b11100 :
b11100 ~
b11100 P"
bx z
bx )"
bx ."
bx +
bx <"
bx B"
bx H"
bx K"
b1 B
b1 7"
b1 ?"
b1 F"
b1 J"
b10100 5
b10100 9"
b10100 G"
b10100 @"
b1001 0
b1001 3"
b1001 ;"
b1001 A"
b1001 V"
b1001 &#
0%
b1 #
b1 H
b1 ="
b1 D"
b1 \
b11000 6
b11000 F
b11000 8"
b11000 [
b1010 .
b1010 G
b1010 ]
b1010 0"
b1010 :"
bx ,
bx 1"
bx Y"
bx n"
bx -
bx 2"
bx X"
bx m"
b11100 7
b11100 S
b11100 S"
b11100 i"
b11000 9
b11000 T
b11000 n
b11000 Q"
b11000 h"
bx /
bx O
bx W"
bx l"
bx 3
bx R
bx l
bx y
bx ("
bx >
bx U
bx j
bx m
bx N"
bx f"
bx E
bx Y
bx g
bx M"
bx e"
xA
x'
xp"
x<
xg"
xD
x*
xo"
b100000 %"
b11100 $"
b100100 {
b100100 *"
b100100 ,"
b100000 }
b100000 '"
b100000 -"
b100000 /"
1!
#1050
0!
#1100
b100100 8
b100100 |
b100100 R"
b100000 :
b100000 ~
b100000 P"
b100100 %"
b100000 $"
b100000 7
b100000 S
b100000 S"
b100000 i"
b11100 9
b11100 T
b11100 n
b11100 Q"
b11100 h"
bx C
bx X
bx ^
bx o
bx t
bx 6"
bx C"
bx #
bx H
bx ="
bx D"
bx \
b11100 6
b11100 F
b11100 8"
b11100 [
bx .
bx G
bx ]
bx 0"
bx :"
x&
x_
x;
xZ
x)
b11000 5
b11000 9"
b11000 G"
b11000 @"
b1010 0
b1010 3"
b1010 ;"
b1010 A"
b1010 V"
b1010 &#
bx {
bx *"
bx ,"
bx }
bx '"
bx -"
bx /"
1!
#1150
0!
#1200
bx $
bx M
bx r
bx w
bx I"
bx L"
bx Z"
bx '#
bx 8
bx |
bx R"
bx :
bx ~
bx P"
bx B
bx 7"
bx ?"
bx F"
bx J"
b11100 5
b11100 9"
b11100 G"
b11100 @"
bx 0
bx 3"
bx ;"
bx A"
bx V"
bx &#
x%
x(
b100000 6
b100000 F
b100000 8"
b100000 [
b100100 7
b100100 S
b100100 S"
b100100 i"
b100000 9
b100000 T
b100000 n
b100000 Q"
b100000 h"
bx %"
bx $"
1!
